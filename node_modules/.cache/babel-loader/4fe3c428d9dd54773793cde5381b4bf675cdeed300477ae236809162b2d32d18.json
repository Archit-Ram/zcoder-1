{"ast":null,"code":"var _jsxFileName = \"/Users/littlearchit/Desktop/zcoderz-Test/src/components/ExploreQuestion.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Submissions from \"./Submissions\";\nimport { CurrentUserContext } from \"../App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExploreQuestion = () => {\n  _s();\n  const {\n    currentUsername\n  } = useContext(CurrentUserContext);\n  const [publicQuestions, setPublicQuestions] = useState([]);\n  useEffect(() => {\n    const fetchPublicQuestions = async () => {\n      if (currentUsername) {\n        try {\n          const response = await fetch(`http://localhost:8000/${currentUsername}/explore`);\n          if (!response.ok) {\n            throw new Error(\"Network response was not ok\");\n          }\n          const data = await response.json();\n          console.log(data);\n          setPublicQuestions(data);\n        } catch (error) {\n          console.error(\"Failed to fetch public questions:\", error);\n        }\n      }\n    };\n    fetchPublicQuestions();\n  }, [currentUsername]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ExploreQuestion\",\n    children: publicQuestions.map(publicQuestion => /*#__PURE__*/_jsxDEV(Submissions, {\n      // Ensure a unique key prop for each item\n      id: publicQuestion._id,\n      question: publicQuestion.question,\n      username: publicQuestion.username,\n      timeOfCreation: publicQuestion.timeOfCreation\n    }, publicQuestion._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(ExploreQuestion, \"noLt8a21T7N/RnSyJ2MOl+VmZgg=\");\n_c = ExploreQuestion;\nexport default ExploreQuestion;\nvar _c;\n$RefreshReg$(_c, \"ExploreQuestion\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Submissions","CurrentUserContext","jsxDEV","_jsxDEV","ExploreQuestion","_s","currentUsername","publicQuestions","setPublicQuestions","fetchPublicQuestions","response","fetch","ok","Error","data","json","console","log","error","className","children","map","publicQuestion","id","_id","question","username","timeOfCreation","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/littlearchit/Desktop/zcoderz-Test/src/components/ExploreQuestion.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport Submissions from \"./Submissions\";\nimport { CurrentUserContext } from \"../App\";\n\nconst ExploreQuestion = () => {\n  const { currentUsername } = useContext(CurrentUserContext);\n  const [publicQuestions, setPublicQuestions] = useState([]);\n\n  useEffect(() => {\n    const fetchPublicQuestions = async () => {\n      if (currentUsername) {\n        try {\n          const response = await fetch(\n            `http://localhost:8000/${currentUsername}/explore`\n          );\n          if (!response.ok) {\n            throw new Error(\"Network response was not ok\");\n          }\n          const data = await response.json();\n          console.log(data);\n          setPublicQuestions(data);\n        } catch (error) {\n          console.error(\"Failed to fetch public questions:\", error);\n        }\n      }\n    };\n\n    fetchPublicQuestions();\n  }, [currentUsername]);\n\n  return (\n    <div className=\"ExploreQuestion\">\n      {publicQuestions.map((publicQuestion) => (\n        <Submissions \n          key={publicQuestion._id} // Ensure a unique key prop for each item\n          id={publicQuestion._id}\n          question={publicQuestion.question} \n          username={publicQuestion.username} \n          timeOfCreation={publicQuestion.timeOfCreation} \n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ExploreQuestion;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,kBAAkB,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAgB,CAAC,GAAGT,UAAU,CAACI,kBAAkB,CAAC;EAC1D,MAAM,CAACM,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1DD,SAAS,CAAC,MAAM;IACd,MAAMW,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,IAAIH,eAAe,EAAE;QACnB,IAAI;UACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAC1B,yBAAyBL,eAAe,UAC1C,CAAC;UACD,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;YAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;UAChD;UACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;UAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;UACjBN,kBAAkB,CAACM,IAAI,CAAC;QAC1B,CAAC,CAAC,OAAOI,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QAC3D;MACF;IACF,CAAC;IAEDT,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACH,eAAe,CAAC,CAAC;EAErB,oBACEH,OAAA;IAAKgB,SAAS,EAAC,iBAAiB;IAAAC,QAAA,EAC7Bb,eAAe,CAACc,GAAG,CAAEC,cAAc,iBAClCnB,OAAA,CAACH,WAAW;MACe;MACzBuB,EAAE,EAAED,cAAc,CAACE,GAAI;MACvBC,QAAQ,EAAEH,cAAc,CAACG,QAAS;MAClCC,QAAQ,EAAEJ,cAAc,CAACI,QAAS;MAClCC,cAAc,EAAEL,cAAc,CAACK;IAAe,GAJzCL,cAAc,CAACE,GAAG;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKxB,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAvCID,eAAe;AAAA4B,EAAA,GAAf5B,eAAe;AAyCrB,eAAeA,eAAe;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}